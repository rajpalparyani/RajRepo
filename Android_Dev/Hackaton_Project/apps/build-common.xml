<?xml version="1.0"?>

<project name="build-common" xmlns:ivy="antlib:org.apache.ivy.ant">
	<path id="OpenSourceLib.taskdef.classpath">
		<fileset dir="../OpenSourceLib">
			<include name="ant-contrib-1.0b3.jar" />
            		<include name="antenna-bin-0.9.13.jar" />
            		<include name="findbugs-1.3.9\lib\findbugs-ant.jar" />
            		<include name="apache-ivy-2.2.0\ivy-2.2.0.jar" />
           		<include name="javancss-32.53\lib\*.jar" />
           		<include name="crashlytics.jar"/>
		</fileset>
	</path>

	<property name="findbugs_home" value="../OpenSourceLib/findbugs-1.3.9" />
	<!-- =============================================== task definition =============================================== -->
	<taskdef resource="antenna.properties" classpathref="OpenSourceLib.taskdef.classpath" />
	<taskdef resource="net/sf/antcontrib/antcontrib.properties" classpathref="OpenSourceLib.taskdef.classpath" />
	<taskdef name="findbugs" classname="edu.umd.cs.findbugs.anttask.FindBugsTask" classpathref="OpenSourceLib.taskdef.classpath" />
        <taskdef resource="org/apache/ivy/ant/antlib.xml" uri="antlib:org.apache.ivy.ant" classpathref="OpenSourceLib.taskdef.classpath"/>

	<!-- ============================================== target ============================================== -->
	<target name="init" description="--> init the properties">
		<property name="lib.dir" value="${base.dir}/lib" />
		<property name="app_lib" value="app_lib" />
		<property name="searchvpl_lib" value="searchvpl_lib" />
		<property name="support_lib" value="support_lib" />
		<property name="tnview-lib" value="tnview-lib" />
		<property name="ant.lib.dir" value="lib/ant-lib" />
		<property name="unittest.lib.dir" value="lib/unittest-lib" />
		<property name="findbugs.plugin.dir" value="lib/findbugs-plugin" />
		<property name="classes.dir" value="${base.dir}/classes" />
		<property name="instrumented-classes.dir" value="${base.dir}/instrumented-classes" />
		<property name="src.dir" value="${base.dir}/src" />
		<property name="test.dir" value="${base.dir}/unit_test" />
		<property name="junit.xml.dir" value="${base.dir}/junitReport" />
		<property name="junit.html.dir" value="${junit.xml.dir}/html" />
		<property name="coberturareport.dir" value="${base.dir}/cobertura" />
		<property name="coberturareport.xml.dir" value="${coberturareport.dir}/xml" />
		<property name="jar.file" value="${jar.file}" />
		<property name="testreport.file" value="testreport-${jar.file}" />
		<property name="findbugs.file" value="findbugs-${jar.file}" />
		<property name="findbugs.filter" value="${findbugs.filter}" />
		<property name="findbugs.enable" value="${findbugs.enable}" />
		<property name="unittest.enable" value="${unittest.enable}" />

		<property name="publish.dir" value="${base.dir}/build" />
		<property name="dist.dir" value="${basedir}/dist" />
		<property name="retrieve.dir" value="${base.dir}/retrieve" />
		<property name="retrieve.dir.backup" value="lib/retrieve_backup" />
		
		<condition property="cobertura.totallinerate" value="0">
   			<not>  
      			<isset property="cobertura.totallinerate"/>
   			</not>
		</condition>
	</target>

	<target name="resolve" description="--> resolve and retrieve dependencies with ivy">
		<mkdir dir="${lib.dir}" />
		<mkdir dir="${ant.lib.dir}" />
		<mkdir dir="${findbugs.plugin.dir}" />
		<!-- not usually necessary, ivy creates the directory IF there are dependencies -->
		<mkdir dir="${retrieve.dir}" />

		<ivy:settings file="${ivy.settings}" />
		<!-- the call to resolve is not mandatory, retrieve makes an implicit call if we don't -->
		<if>
			<equals arg1="true" arg2="${localCache}" />
			<then>
				<if>
					<equals arg1="${needwidget}" arg2="true"/>					
					<then>
						<ivy:resolve file="${ivy.file}"/>						
					</then>
					<else>
						<ivy:resolve file="${ivy.file}" conf="app_lib, support_lib,tnview-lib"/>
					</else>
				</if>
				<ivy:retrieve pattern="${retrieve.dir}/[conf]/[artifact]-[revision].[ext]"/>
			</then>
			<else>
				<available file="${retrieve.dir.backup}" type="dir" property="retrieve.dir.backup.dir" />
				<if>
					<equals arg1="true" arg2="${retrieve.dir.backup.dir}" />
					<then>
					<!--retrieve from backup to save time if the dir is not deleted--> 
						<copy toDir="${retrieve.dir}" overwrite="true">
							<fileSet dir="${retrieve.dir.backup}">
								<include name="**/*" />
							</fileSet>
						</copy>
					</then>
					<else>
						<ivy:cleancache />
						<if>
							<equals arg1="${needwidget}" arg2="true"/>						
							<then>
								<ivy:resolve file="${ivy.file}"/>
							</then>
							<else>
								<ivy:resolve file="${ivy.file}" conf="app_lib, support_lib,tnview-lib"/>								
							</else>
						</if>					     
						<ivy:retrieve pattern="${retrieve.dir}/[conf]/[artifact]-[revision].[ext]" />
						<copy toDir="${retrieve.dir.backup}" overwrite="true">
							<fileSet dir="${retrieve.dir}">
								<include name="**/*" />
							</fileSet>
						</copy>
					</else>
				</if>
			</else>
		</if>	
	</target>
	
	<target name="resolve_by_python">
		<delete quiet="true" dir="${basedir}/modules"/>
		<exec  executable="python" failonerror="true">         
			<arg line="build.py --platform=${platform}" />
		</exec> 
	</target>

	<target name="load_ant_project">
		<path id="ant.taskdef.classpath">
			<fileset dir="${ant.lib.dir}" includes="*.jar" />
			<fileset dir="${unittest.lib.dir}" includes="*.jar" />
		</path>
		<!-- ===============================================telenav task definition =============================================== -->
		<!-- common task definition -->
		<taskdef name="appConfigGeneratorTask" classname="com.telenav.ant.task.common.AppConfigGeneratorTask" classpathref="ant.taskdef.classpath" />
		<taskdef name="propertiesLoaderTask" classname="com.telenav.ant.task.common.PropertiesLoaderTask" classpathref="ant.taskdef.classpath" />
		<taskdef name="ninePatchBinaryFilesCreatorTask" classname="com.telenav.ant.task.common.NinePatchBinaryFilesCreatorTask" classpathref="ant.taskdef.classpath" />
		<taskdef name="wellFormedXml" classname="com.telenav.ant.task.common.WellFormedXmlTask" classpathref="ant.taskdef.classpath" />
		<taskdef name="createIndexFileTask" classname="com.telenav.ant.task.common.IndexFileCreatorTask" classpathref="ant.taskdef.classpath" />
		<taskdef name="caseStringTask" classname="com.telenav.ant.task.common.CaseStringTask" classpathref="ant.taskdef.classpath" />
		<taskdef name="mergeArgumentsTask" classname="com.telenav.ant.task.common.MergeArgumentsTask" classpathref="ant.taskdef.classpath" />
		<taskdef name="resourceUtilGeneratorTask" classname="com.telenav.ant.task.common.ResourceUtilGeneratorTask" classpathref="ant.taskdef.classpath" />

		<!-- android app task definition -->
		<!-- android core task definition -->
		<taskdef name="stringsGeneratorTask" classname="com.telenav.ant.task.core.android.StringsGeneratorTask" classpathref="ant.taskdef.classpath" />
		
		<!-- for cobertura -->
		<taskdef classpathref="ant.taskdef.classpath" resource="tasks.properties" />
	</target>

	<!-- preload -->
	<target name="preload_dev">
		<!-- set subproject's name -->
		<property name="subproject_name" value="telenav-dev-${platform}" />

		<antcall target="preload" />
	</target>

	<target name="preload_rel">
	
		<!-- set subproject's name -->
		
		<if>
			<equals arg1="true" arg2="${release}" />
			<then>
				<property name="subproject_name" value="telenav-rel-${platform}" />
			</then>
			<else>
				<property name="subproject_name" value="telenav-rel-${platform}-ci" />
			</else>
		</if>
		
		<antcall target="preload" />

	</target>

	<target name="preload">
		<echo>The platform is: ${platform}</echo>

		<echo>The brand name is: ${BRAND_NAME}</echo>
		<fail unless="BRAND_NAME">
			.
			-------------------------Error---------------------------
			Please import the property file such as att_brand.properties
			------------------------@TeleNav--------------------------
		</fail>

		<echo>The build version is: ${version}</echo>

		<fail unless="version">
			.
			-------------------------Error---------------------------
					Please set the build version!
			------------------------@TeleNav--------------------------
		</fail>

		<echo message="the subproject name is: ${subproject_name}" />

		<antcall target="generate_subproject" />
	</target>

	<target name="generate_subproject">
		<delete quiet="true" dir="${basedir}/${subproject_name}" />
		<mkdir dir="${basedir}/${subproject_name}" />
	</target>

	<target name="propertiesLoader">
		<propertiesLoaderTask />
	</target>

	<target name="copy_resource">
		<available file="${from_dir_path}" type="dir" property="res.dir" />
		<if>
			<equals arg1="true" arg2="${res.dir}" />
			<then>
				<copy toDir="${to_dir_path}" overwrite="true">
					<fileSet dir="${from_dir_path}" casesensitive="false">
						<include name="**/*" />
						<exclude name="**/Thumbs.db" />
						<exclude name="**/*.index.gz" />
					</fileSet>
				</copy>
			</then>
		</if>
	</target>

	<target name="compile" description="--> compile the project">
		<echo message="compile..." />

		<available file="${extra.lib.dir}" type="dir" property="extra.lib.present" />

		<if>
			<equals arg1="true" arg2="${extra.lib.present}" />
			<then>
				<path id="compile.classpath">
					<fileset dir="${lib.dir}">
						<include name="*.jar" />
					</fileset>
					<fileset dir="${extra.lib.dir}">
						<include name="*.jar" />
					</fileset>
				</path>
			</then>
			<else>
				<path id="compile.classpath">
					<fileset dir="${lib.dir}">
						<include name="*.jar" />
					</fileset>
				</path>
			</else>
		</if>

		<mkdir dir="${classes.dir}" />
		<!-- compile android code -->
		<javac encoding="ascii" target="${class.version}" source="${source.version}" destdir="${classes.dir}" classpathref="compile.classpath" fork="true" debug="true" optimize="true" deprecation="false" excludes="${compile.excludes}" bootclasspathref="${platform}.boot.classpath">

			<src path="${src.dir}" />
		</javac>

	</target>

	<target name="findbugs">
		<echo>copy findbugs plugin ....</echo>
		<antcall target="copy_findbugs_plugin" />

		<mkdir dir="${publish.dir}" />
		<echo message="is findbugs enable: ${findbugs.enable}" />
		<if>
			<equals arg1="true" arg2="${findbugs.enable}" />
			<then>
				<findbugs home="${findbugs_home}" output="xml" excludeFilter="${findbugs.filter}" jvmargs="-Xmx512m" outputFile="${publish.dir}/${findbugs.file}.xml" errorProperty="isFindbugsError" warningsProperty="isFindbugsWarning">
					<!-- auxClasspath refid="compile.classpath" /-->
					<class location="${classes.dir}" />
					<sourcePath path="${src.dir}" />
				</findbugs>
			</then>
			<else>
				<echoxml file="${publish.dir}/${findbugs.file}.xml">
				  <findbugs>
						Nothing
				  </findbugs>
				</echoxml>
			</else>
		</if>
	</target>
	
<target name="find_bugs" depends="init">
		<echo>copy findbugs plugin ....</echo>
		<antcall target="copy_findbugs_plugin" />

		<mkdir dir="${publish.dir}" />
		<echo message="is findbugs enable: ${findbugs.enable}" />
		<if>
			<equals arg1="true" arg2="${findbugs.enable}" />
			<then>
				<findbugs home="${findbugs_home}" output="xml" excludeFilter="${findbugs.filter}" jvmargs="-Xmx512m" outputFile="${publish.dir}/${findbugs.file}.xml" errorProperty="isFindbugsError" warningsProperty="isFindbugsWarning">
					<!-- auxClasspath refid="compile.classpath" /-->
					<class location="${classes.dir}" />
					<sourcePath path="${src.dir}" />
				</findbugs>
			</then>
			<else>
				<echoxml file="${publish.dir}/${findbugs.file}.xml">
				  <findbugs>
						Nothing
				  </findbugs>
				</echoxml>
			</else>
		</if>
	</target>
	
	<target name="copy_findbugs_plugin">
		<antcall target="copy_resource">
			<param name="from_dir_path" value="${findbugs.plugin.dir}" />
			<param name="to_dir_path" value="${findbugs_home}/plugin" />
		</antcall>
	</target>

	<target name="unittest" depends="compile, jar">
		<!-- compile unit test source -->
		<mkdir dir="${publish.dir}" />
		
		<delete quiet="true" dir="${test.dir}/bin" />
		<mkdir dir="${test.dir}/bin" />
		
		<delete quiet="true" dir="${junit.xml.dir}" />
		<mkdir dir="${junit.xml.dir}" />
		<mkdir dir="${junit.html.dir}" />
		
		<echo message="is unittest enable: ${unittest.enable}" />
		<echo message="is unittest enable: ${lib.dir}" />
		
		<if>
			<equals arg1="true" arg2="${unittest.enable}" />
			<then>
			<antcall target="cobertura-instrument" inheritAll="true" inheritRefs="true" />
			<if>
				<equals arg1="true" arg2="${extra.lib.present}" />
				<then>
					<path id="unittest.compile.classpath">
						<fileset dir="${lib.dir}">
							<include name="*.jar" />
						</fileset>
						<fileset dir="${unittest.lib.dir}">
							<include name="*.jar"/>
						</fileset>
						<fileset dir="${extra.lib.dir}">
							<include name="*.jar" />
						</fileset>
						<fileset dir="${publish.dir}">
							<include name="*.jar" />
						</fileset>		
					</path>
					<path id="unittest.classpath">
						<fileset dir="${unittest.lib.dir}">
							<include name="*.jar"/>
						</fileset>
						<fileset dir="${lib.dir}">
							<include name="*.jar" />
						</fileset>
						<fileset dir="${extra.lib.dir}">
							<include name="*.jar" />
						</fileset>
					</path>
				</then>
				<else>
					<path id="unittest.compile.classpath">
						<fileset dir="${lib.dir}">
							<include name="*.jar" />
						</fileset>
						<fileset dir="${unittest.lib.dir}">
							<include name="*.jar"/>
						</fileset>
						<fileset dir="${publish.dir}">
							<include name="*.jar" />
						</fileset>		
					</path>
					<path id="unittest.classpath">
						<fileset dir="${unittest.lib.dir}">
							<include name="*.jar"/>
						</fileset>
						<fileset dir="${lib.dir}">
							<include name="*.jar" />
						</fileset>
						
						<fileset dir="${sdk-folder}">
							<include name="*.jar"/>
						</fileset>
					</path>
				</else>
			</if>
			
			<javac 
				encoding="ascii" 
				target="${class.version}" 
				source="${source.version}"
				srcdir="${test.dir}"
				includes="**/*Test*.java"
				destdir="${test.dir}/bin"
				classpathref="unittest.compile.classpath"
				fork="true"
				debug="true">
			</javac>
	
			<!-- clean up old test reports -->			
			<!--why is this showing up twice?
			<delete quiet="true" dir="${test.dir}/testreport" />
			<mkdir dir="junit" />
			-->
			
			<!-- run juit -->
			<junit
				printsummary="true"
				showoutput="true"
				fork="true"
				haltonfailure="false"
				errorproperty="isJunitError"
				failureproperty="isJunitFailure"
				maxmemory="512m"
				timeout="450000">
				
				<sysproperty key="net.sourceforge.cobertura.datafile" file="${test.dir}/cobertura/cobertura.ser" />
	
				<classpath>
					<pathelement path="${instrumented-classes.dir}"/>
					<pathelement path="${classes.dir}"/>
					<pathelement path="${test.dir}/bin"/>
					<path refid="unittest.classpath" />
				</classpath>
	
				<!-- test report -->
				<formatter type="xml" />
				
				<!-- tests to include -->
				<batchtest todir="${junit.xml.dir}">
					<fileset dir="${test.dir}">
					  <include name="**/*Test*.java"/>
					</fileset>
				</batchtest>			
			</junit>

            <!-- transform junit report to html -->
			<junitreport todir="${junit.html.dir}">
				<fileset dir="${junit.xml.dir}">
                                        <include name="TEST-*.xml"/>
                                </fileset>
				<report format="frames" todir="${junit.html.dir}"/>
            </junitreport>
			
			<echo>DB-Test merging .............</echo>
			<cobertura-merge datafile="${test.dir}/merge-cobertura/cobertura.ser">
				<fileset dir="${basedir}/lib/.ivy-cache">
					<include name="**/cobertura*.ser" />
				</fileset>
				<fileset dir="${test.dir}/cobertura" includes="cobertura.ser" />
			</cobertura-merge>

			<mkdir dir="${coberturareport.dir}"/>
			<mkdir dir="${coberturareport.xml.dir}"/>
			<cobertura-report format="html" 
				destdir="${coberturareport.dir}" 
				srcdir="${src.dir}" 
				datafile="${test.dir}/merge-cobertura/cobertura.ser"/>
            
			<cobertura-report format="xml"
				destdir="${coberturareport.xml.dir}"
                srcdir="${src.dir}"
				datafile="${test.dir}/merge-cobertura/cobertura.ser"/>
			<echo message="Average line coverage should be above ${cobertura.totallinerate}"/>
			
			<cobertura-check datafile="${test.dir}/merge-cobertura/cobertura.ser" 
				branchrate="0" 
				totallinerate="${cobertura.totallinerate}" 
				haltonfailure="true" />
			</then>
		</if>
		<!-- create an empty file in case there is no test report generated -->
		<touch file="${junit.xml.dir}/nouse.txt" />
		<zip destfile="${publish.dir}/${testreport.file}.zip">
			<fileset dir="${junit.xml.dir}" />
		</zip>
	</target>

	<target name="cobertura-instrument">
		<taskdef resource="tasks.properties" classpathref="ant.taskdef.classpath"/>
		<delete file="${test.dir}/cobertura/cobertura.ser"/>
		<delete dir="${instrumented-classes.dir}"/>
		<cobertura-instrument datafile="${test.dir}/cobertura/cobertura.ser" todir="${instrumented-classes.dir}">
			<fileset dir="${classes.dir}" excludesfile="cobertura_filter.properties">
				<include name="**/*.class"/>
			</fileset>
		</cobertura-instrument>
	</target>
	
	<target name="jar" description="--> make a jar file for this project">
		<mkdir dir="${publish.dir}" />
		<jar destfile="${publish.dir}/${jar.file}.jar">
			<fileset dir="${classes.dir}" />
			<manifest>
				<attribute name="Built-By" value="telenav" />
				<attribute name="Build-Version" value="${product.version}" />
			</manifest>
			<zipgroupfileset dir="${base.dir}/lib" includes="*.jar" />
		</jar>
	</target>

	<target name="publish" description="--> publish this project in the ivy repository">
		<echo>Module Name is ---------> ${module.name}</echo>
		<ivy:publish resolver="${ivy.default.publish.resolver}" pubrevision="${product.version}" overwrite="true">
			<artifacts pattern="${publish.dir}/[artifact].[ext]" />
		</ivy:publish>
		<echo message="project ${ant.project.name} released with version ${product.version}" />
	</target>

	<target name="test_coverage" description="--> running test coverage" if="test_coverage">
		<if>
			<equals arg1="true" arg2="${test_coverage}" />
			<then>
			    <property name="test_report_dir" value="test-reports"/>
          <delete dir="${test_report_dir}"/>
          <mkdir dir="${test_report_dir}"/>
		      <antcall target="javancss"/>
		      <!--antcall target="testability_explorer"/-->
		  </then>
		</if>
		
	</target>

	<target name="javancss" description="--> running Java NCSS">
		<taskdef name="javancss" classname="javancss.JavancssAntTask" classpathref="OpenSourceLib.taskdef.classpath"/>
		<javancss 
			srcdir="${src.dir}" 
			generateReport="true" 
			outputfile="${test_report_dir}/javancss_metrics.xml" 
			format="xml" />
	</target>

	<target name="testability_explorer" description="--> running Testability Explorer">
		<property name="testability.report.file" value="${test_report_dir}/testability.report.xml"/>
		<property name="testability.error.file" value="${test_report_dir}/testability.error.txt"/>
		<property name="testability.whitelist" value="com.thirdparties.;com.google."/>
        <taskdef name="testability" classname="com.google.ant.TestabilityTask"/>
        <testability filter=""
            resultfile="${testability.report.file}"
            errorfile="${testability.error.file}"
            whitelist="${testability.whitelist}"
            print="xml"
            printdepth="2"
            mincost="1"
            maxexcellentcost="50"
            maxacceptablecost="100"
            worstoffendercount="25"
            cyclomatic="1"
            global="10"
            failproperty="testability.flag">
            <classpath>
                <fileset dir="${publish.dir}">
					<include name="${jar.file}.jar"/>
                </fileset>
            </classpath>
        </testability>
	</target>
</project>
