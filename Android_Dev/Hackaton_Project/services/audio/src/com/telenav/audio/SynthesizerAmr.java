/**
 *
 * Copyright 2010 TeleNav, Inc. All rights reserved.
 * SynthesizerAmr.java
 *
 */
package com.telenav.audio;

import com.telenav.datatypes.audio.AudioData;

/**
 *@author fqming (fqming@telenav.cn)
 *@date Jul 27, 2010
 */
class SynthesizerAmr extends Synthesizer
{

    private static byte[] blankaudio = new byte[]
    // replace audio to amr 7.4kbps
    {  36, -8, 30, 79, -58, 36, 86, -75, 18, -93, -104, -118, 119, 24, 0, -125, 50, 4, 33, 48, 36, -8, 86, 102, -96,
            0, 38, -60, -73, -107, -88, 43, 74, 76, 84, 17, 61, -57, 124, -80, 36, -1, 43, -103, 0, 96, 28, -50, 5, 21, -49, -81, 41, -122,
            -88, -80, -73, 81, 13, -48, 36, 43, 7, -40, -127, 96, 25, -15, -127, -79, 61, 1, 78, 27, -116, -108, 53, 41, 70, 112, 36, 52,
            -117, 60, -95, 32, 31, -4, 50, -78, 20, 4, -92, 102, 70, -20, 96, 77, -79, -128, 36, -36, 0, 96, 1, 32, 19, 61, 1, 5, -77, -18,
            86, 66, 65, 102, -124, -24, 75, 32, 36, 85, 22, 60, 32, 32, 15, 57, 1, -68, 3, 41, -121, 46, 78, -124, 117, 30, -54, -16, 36,
            -84, -100, 3, 8, -120, -103, -2, -30, 86, 77, -15, -30, 78, -14, 5, 29, -12, -54, -48, 36, -90, -50, -122, 1, -32, 6, 56, 5,
            70, 124, 81, -29, -6, -62, -84, -80, 109, -123, -64, 36, -90, 124, 4, -82, 32, 12, 61, 5, 80, 71, -107, 127, -115, 86, -56, 31,
            9, 38, 64, 36, -90, -50, -122, 11, 32, 18, 57, -123, -48, -109, -55, 26, -119, 3, -14, -78, -91, -18, -96, 36, -90, -50, -124,
            -89, -128, 24, 59, 5, 16, -41, -28, 39, -20, 117, -61, 8, 107, -41, -80, 36, -90, 116, 6, 19, -32, 18, 57, 5, -80, -75, -13,
            -41, -125, 30, -34, 64, 6, -38, 48, 36, -90, -50, -122, 11, 64, 12, -6, -127, 64, 103, -44, 32, 69, 66, -117, -104, 66, 124,
            -112, 36, -90, -50, -122, 20, -96, 24, 56, 5, 16, 109, -20, 21, -60, -38, 120, 78, 38, 5, 112, 36, -90, -50, -122, 9, 96, 24,
            -64, 7, -80, -89, -20, 29, 67, 86, 11, 85, -56, -22, -128, 36, -90, 116, 6, 24, 96, 18, 58, 5, -112, 121, -35, 77, -29, -40,
            25, 47, 77, 32, -16, 36, -90, -50, -124, -79, -32, 26, 59, 5, -64, 101, -57, 6, 32, -82, -104, 123, -87, -67, -16, 36, -90,
            -50, -122, 24, 96, 24, -104, 6, -80, -60, -48, 29, 14, 84, -54, 39, -90, -25, -16, 36, -90, -50, -122, 3, -32, 6, 59, 5, 64,
            -117, -86, -6, 57, 60, 108, -10, 120, -11, 64, 36, -90, -50, -122, 24, 96, 24, -54, -123, -16, -105, -54, 19, -120, -120, -121,
            17, 26, -22, -48, 36, -90, 116, 6, 48, -32, 6, 58, 5, 64, -93, -57, 36, 7, -3, 27, 115, 121, 40, -128, 36, -90, -50, -122, 27,
            -64, 24, 56, 5, -80, -121, -30, 29, -128, -2, 55, 70, -86, 48, 16, 36, -90, 116, 6, 20, -96, 12, 61, 5, -112, -97, -36, -120,
            77, 17, 120, -2, 104, 69, -48, 36, -90, -50, -124, -79, -32, 24, -7, -127, -32, -88, -31, -44, -52, 117, -77, 47, -36, -108,
            -64, 36, -90, 116, 6, 15, 0, 13, 66, 0, -40, 59, -30, -15, -80, 103, -25, -59, 36, -28, -64, 36, -90, -50, -124, -91, -96, 27,
            -7, 2, -112, 31, 116, 54, -17, -124, 16, 110, -31, -84, 32, 36, -90, 116, 3, 79, -128, 22, 62, -123, -48, 71, -35, -82, 103,
            18, -93, 53, 104, -22, 80, 36, -90, -50, -124, -89, -128, 24, -56, -123, 32, -109, -54, -37, 32, -114, 46, -58, -54, -76, 96,
            36, -90, 124, 4, -83, -96, 24, 57, -123, -80, -109, -35, -48, 67, 10, -30, 82, -97, 68, -48, 36, -90, -50, -122, 9, 96, 24, 58,
            -123, 8, 69, -18, -59, -17, -52, 108, 45, 127, -24, 16, 36, -90, 116, 6, 26, 64, 12, -62, 7, -128, -22, -4, -95, 72, 31, -96,
            20, 33, -17, -96 };
	
    public byte[] synthesize(AudioData[] audios)
    {
        int size = 0; // total size of all audios
        byte[] blank = blankaudio;
        byte frameHeader = blank[0];
        for (int i = 0; i < audios.length; i++)
        {
            byte[] data = audios[i].getData();
            if (data != null && data.length > 6)
            {
                if (size == 0)
                {
                    //discard blank audio if sample size is not match.
                    if (data[6] != frameHeader)
                    {
                        blank = new byte[0];
                    }
                }
                size += data.length - 6;
            }
        }

        if (size <= 0)
            return null;
        
        size += 6; // need to keep first audio's header

        int offset = 0;
     
	
        byte[] buff = new byte[size + blank.length];
	
        for (int i = 0; i < audios.length; i++)
        {
            if (audios[i].getData() == null)
                continue;

            if (offset == 0)
            {
                System.arraycopy(audios[i].getData(), 0, buff, offset, audios[i].getData().length);
                offset += audios[i].getData().length;
            }
            else
            {
                System.arraycopy(audios[i].getData(), 6, buff, offset, audios[i].getData().length - 6);
                offset += audios[i].getData().length - 6;
            }
        }
       
        System.arraycopy(blank, 0, buff, offset, blank.length);
        return buff;
    }
    

	
}
