/**
 *
 * Copyright 2011 TeleNav, Inc. All rights reserved.
 * RouteUtil.java
 *
 */
package com.telenav.datatypes.nav;

import java.util.Hashtable;
import java.util.Vector;

import com.telenav.datatypes.DataUtil;
import com.telenav.datatypes.audio.AudioData;
import com.telenav.datatypes.audio.AudioDataFactory;
import com.telenav.datatypes.audio.AudioDataNode;
import com.telenav.datatypes.map.MapUtil;
import com.telenav.datatypes.route.Route;
import com.telenav.datatypes.route.RouteDataFactory;
import com.telenav.datatypes.route.RouteEdge;
import com.telenav.datatypes.route.RouteWrapper;
import com.telenav.datatypes.route.Segment;

/**
 *@author yning
 *@date 2011-6-9
 */
public class RouteUtil
{
	private static byte[] routesData =
	{
		48,-99,-101,58,2,4,0,0,4,42,67,104,117,110,107,95,83,101,108,101,99,
		116,105,111,110,95,82,111,117,116,101,0,6,37,65,5,20,30,15,8,38,
		93,1,0,-2,-95,4,0,8,-55,15,6,32,4,15,8,38,93,1,31,1,
		-90,-57,-94,7,0,0,9,4,0,22,54,9,20,6,65,2,4,0,110,0,
		-2,0,0,0,2,14,1,4,25,4,0,0,0,8,0,0,0,0,49,1,
		9,22,6,77,13,0,8,33,1,2,-2,0,0,0,2,38,1,4,25,4,
		0,2,22,2,4,2,2,4,2,48,2,48,0,0,0,80,1,0,0,0,
		2,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,
		7,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,29,2,9,20,
		6,-7,17,12,8,116,4,-2,0,0,0,2,44,1,4,25,4,0,2,28,
		3,6,2,0,0,6,2,51,2,48,2,48,0,0,0,-127,1,11,0,0,
		0,12,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,16,0,0,
		0,17,0,0,0,18,0,0,0,19,0,0,0,20,0,0,0,21,0,0,
		0,22,0,0,0,23,0,0,0,24,0,0,0,25,0,0,0,26,0,0,
		0,27,0,0,0,28,0,0,0,29,0,0,0,30,0,0,0,31,0,0,
		0,32,0,0,0,33,0,0,0,34,0,0,0,93,7,9,24,6,75,-101,
		4,26,4,-7,3,6,8,2,0,0,2,56,1,4,25,4,0,2,40,5,
		10,0,0,0,2,2,10,2,48,2,48,2,48,2,52,2,52,0,0,0,
		-95,6,35,0,0,0,36,0,0,0,37,0,0,0,38,0,0,0,39,0,
		0,0,40,0,0,0,41,0,0,0,42,0,0,0,43,0,0,0,44,0,
		0,0,45,0,0,0,46,0,0,0,47,0,0,0,48,0,0,0,49,0,
		0,0,50,0,0,0,51,0,0,0,52,0,0,0,53,0,0,0,54,0,
		0,0,55,0,0,0,56,0,0,0,57,0,0,0,58,0,0,0,59,0,
		0,0,60,0,0,0,61,0,0,0,62,0,0,0,63,0,0,0,64,0,
		0,0,65,0,0,0,66,0,0,0,67,0,0,0,68,0,0,0,69,0,
		0,0,70,0,0,0,71,0,0,0,72,0,0,0,73,0,0,0,74,0,
		0,0,75,0,0,0,76,0,0,0,77,0,0,0,78,0,0,0,79,0,
		0,0,80,0,0,0,81,0,0,0,82,0,0,0,83,0,0,0,84,0,
		0,0,85,0,0,0,86,0,0,0,87,0,0,0,88,0,0,0,89,0,
		0,0,90,0,0,0,91,0,0,0,92,0,0,0,93,0,0,0,94,0,
		0,0,95,0,0,0,96,0,0,0,97,0,0,0,98,0,0,0,99,0,
		0,0,100,0,0,0,101,0,0,0,102,0,0,0,103,0,0,0,104,0,
		0,0,105,0,0,0,106,0,0,0,107,0,0,0,108,0,0,0,109,0,
		0,0,110,0,0,0,111,0,0,0,112,0,0,0,113,0,0,0,114,0,
		0,0,115,0,0,0,116,0,0,0,117,0,0,0,118,0,0,0,119,0,
		0,0,120,0,0,0,121,0,0,0,122,0,0,0,123,0,0,0,124,0,
		0,0,125,0,0,0,126,0,0,0,127,0,0,0,-128,0,0,0,-127,0,
		0,0,-126,0,0,0,-125,0,0,0,-124,0,0,0,-123,0,0,0,-122,0,
		0,0,-121,0,0,0,-120,0,0,0,-119,0,0,0,-118,0,0,0,-117,0,
		0,0,-116,0,0,0,104,9,22,6,9,7,54,2,-127,1,10,-2,2,0,
		0,2,38,1,4,25,4,0,2,22,2,4,0,2,4,2,48,2,48,0,
		0,0,32,-115,0,0,0,-114,0,0,0,-113,0,0,0,-112,0,0,0,74,
		9,22,6,-23,5,52,2,-43,2,10,-2,2,0,0,2,32,1,4,25,4,
		0,2,16,1,2,2,2,2,48,0,0,0,8,-111,0,0,0,96,9,22,
		6,117,6,0,2,29,2,12,-2,2,0,0,2,38,1,4,25,4,0,2,
		22,2,4,2,2,4,2,48,2,48,0,0,0,24,-110,0,0,0,-109,0,
		0,0,-108,0,0,0,54,9,20,6,68,52,8,49,2,0,-2,0,0,0,
		2,14,1,4,25,4,0,0,0,8,-107,0,0,0,94,9,22,6,1,10,
		52,8,117,1,0,-2,2,0,0,2,44,1,4,25,4,0,2,28,3,6,
		2,0,0,6,2,48,2,48,2,48,0,0,0,16,-106,0,0,0,-105,0,
		0,0,56,9,22,6,-31,2,54,8,109,1,14,16,2,0,0,2,14,1,
		4,25,4,0,0,0,8,-104,0,0,0,54,9,20,6,100,38,8,-31,1,
		18,-2,0,0,0,2,14,1,4,25,4,0,0,0,8,-103,0,0,0,0,
		-79,16,6,32,4,-113,8,38,93,1,31,1,-90,-57,-94,7,0,0,29,4,
		0,26,52,9,18,6,0,8,0,18,0,-2,2,0,0,2,14,1,4,25,
		4,0,0,0,8,-99,0,0,0,60,9,18,6,0,0,6,18,0,-2,2,
		0,0,2,14,1,4,25,4,0,0,0,16,-93,0,0,0,-92,0,0,0,
		54,9,20,6,65,2,4,0,110,0,-2,0,0,0,2,14,1,4,25,4,
		0,0,0,8,0,0,0,0,49,1,9,22,6,77,13,0,8,33,1,2,
		-2,0,0,0,2,38,1,4,25,4,0,2,22,2,4,2,2,4,2,48,
		2,48,0,0,0,80,1,0,0,0,2,0,0,0,3,0,0,0,4,0,
		0,0,5,0,0,0,6,0,0,0,7,0,0,0,8,0,0,0,9,0,
		0,0,10,0,0,0,29,2,9,20,6,-7,17,12,8,116,4,-2,0,0,
		0,2,44,1,4,25,4,0,2,28,3,6,2,0,0,6,2,51,2,48,
		2,48,0,0,0,-127,1,11,0,0,0,12,0,0,0,13,0,0,0,14,
		0,0,0,15,0,0,0,16,0,0,0,17,0,0,0,18,0,0,0,19,
		0,0,0,20,0,0,0,21,0,0,0,22,0,0,0,23,0,0,0,24,
		0,0,0,25,0,0,0,26,0,0,0,27,0,0,0,28,0,0,0,29,
		0,0,0,30,0,0,0,31,0,0,0,32,0,0,0,33,0,0,0,34,
		0,0,0,93,7,9,24,6,75,-101,4,26,4,-7,3,6,8,2,0,0,
		2,56,1,4,25,4,0,2,40,5,10,0,0,0,2,2,10,2,48,2,
		48,2,48,2,52,2,52,0,0,0,-95,6,35,0,0,0,36,0,0,0,
		37,0,0,0,38,0,0,0,39,0,0,0,40,0,0,0,41,0,0,0,
		42,0,0,0,43,0,0,0,44,0,0,0,45,0,0,0,46,0,0,0,
		47,0,0,0,48,0,0,0,49,0,0,0,50,0,0,0,51,0,0,0,
		52,0,0,0,53,0,0,0,54,0,0,0,55,0,0,0,56,0,0,0,
		57,0,0,0,58,0,0,0,59,0,0,0,60,0,0,0,61,0,0,0,
		62,0,0,0,63,0,0,0,64,0,0,0,65,0,0,0,66,0,0,0,
		67,0,0,0,68,0,0,0,69,0,0,0,70,0,0,0,71,0,0,0,
		72,0,0,0,73,0,0,0,74,0,0,0,75,0,0,0,76,0,0,0,
		77,0,0,0,78,0,0,0,79,0,0,0,80,0,0,0,81,0,0,0,
		82,0,0,0,83,0,0,0,84,0,0,0,85,0,0,0,86,0,0,0,
		87,0,0,0,88,0,0,0,89,0,0,0,90,0,0,0,91,0,0,0,
		92,0,0,0,93,0,0,0,94,0,0,0,95,0,0,0,96,0,0,0,
		97,0,0,0,98,0,0,0,99,0,0,0,100,0,0,0,101,0,0,0,
		102,0,0,0,103,0,0,0,104,0,0,0,105,0,0,0,106,0,0,0,
		107,0,0,0,108,0,0,0,109,0,0,0,110,0,0,0,111,0,0,0,
		112,0,0,0,113,0,0,0,114,0,0,0,115,0,0,0,116,0,0,0,
		117,0,0,0,118,0,0,0,119,0,0,0,120,0,0,0,121,0,0,0,
		122,0,0,0,123,0,0,0,124,0,0,0,125,0,0,0,126,0,0,0,
		127,0,0,0,-128,0,0,0,-127,0,0,0,-126,0,0,0,-125,0,0,0,
		-124,0,0,0,-123,0,0,0,-122,0,0,0,-121,0,0,0,-120,0,0,0,
		-119,0,0,0,-118,0,0,0,-117,0,0,0,-116,0,0,0,104,9,22,6,
		9,7,54,2,-127,1,10,-2,2,0,0,2,38,1,4,25,4,0,2,22,
		2,4,0,2,4,2,48,2,48,0,0,0,32,-115,0,0,0,-114,0,0,
		0,-113,0,0,0,-112,0,0,0,74,9,22,6,-23,5,52,2,-43,2,10,
		-2,2,0,0,2,32,1,4,25,4,0,2,16,1,2,2,2,2,48,0,
		0,0,8,-111,0,0,0,96,9,22,6,117,6,0,2,29,2,12,-2,2,
		0,0,2,38,1,4,25,4,0,2,22,2,4,2,2,4,2,48,2,48,
		0,0,0,24,-110,0,0,0,-109,0,0,0,-108,0,0,0,54,9,20,6,
		68,52,8,49,2,0,-2,0,0,0,2,14,1,4,25,4,0,0,0,8,
		-107,0,0,0,94,9,22,6,1,10,52,8,117,1,0,-2,2,0,0,2,
		44,1,4,25,4,0,2,28,3,6,2,0,0,6,2,48,2,48,2,48,
		0,0,0,16,-106,0,0,0,-105,0,0,0,56,9,22,6,-31,2,54,8,
		109,1,14,16,2,0,0,2,14,1,4,25,4,0,0,0,8,-104,0,0,
		0,54,9,20,6,100,38,8,-31,1,18,-2,0,0,0,2,14,1,4,25,
		4,0,0,0,8,-103,0,0,0,0,29,16,6,32,4,-81,8,38,93,1,
		31,1,-90,-57,-94,7,0,0,13,4,0,24,56,9,22,6,-7,2,12,0,
		33,1,20,-2,2,0,0,2,14,1,4,25,4,0,0,0,8,-98,0,0,
		0,54,9,20,6,-23,1,4,8,90,22,-2,0,0,0,2,14,1,4,25,
		4,0,0,0,8,-97,0,0,0,17,1,9,22,6,-87,10,0,8,29,1,
		2,-2,0,0,0,2,38,1,4,25,4,0,2,22,2,4,2,2,4,2,
		48,2,48,0,0,0,64,3,0,0,0,4,0,0,0,5,0,0,0,6,
		0,0,0,7,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,29,
		2,9,20,6,-7,17,12,8,116,4,-2,0,0,0,2,44,1,4,25,4,
		0,2,28,3,6,2,0,0,6,2,51,2,48,2,48,0,0,0,-127,1,
		11,0,0,0,12,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,
		16,0,0,0,17,0,0,0,18,0,0,0,19,0,0,0,20,0,0,0,
		21,0,0,0,22,0,0,0,23,0,0,0,24,0,0,0,25,0,0,0,
		26,0,0,0,27,0,0,0,28,0,0,0,29,0,0,0,30,0,0,0,
		31,0,0,0,32,0,0,0,33,0,0,0,34,0,0,0,93,7,9,24,
		6,75,-101,4,26,4,-7,3,6,8,2,0,0,2,56,1,4,25,4,0,
		2,40,5,10,0,0,0,2,2,10,2,48,2,48,2,48,2,52,2,52,
		0,0,0,-95,6,35,0,0,0,36,0,0,0,37,0,0,0,38,0,0,
		0,39,0,0,0,40,0,0,0,41,0,0,0,42,0,0,0,43,0,0,
		0,44,0,0,0,45,0,0,0,46,0,0,0,47,0,0,0,48,0,0,
		0,49,0,0,0,50,0,0,0,51,0,0,0,52,0,0,0,53,0,0,
		0,54,0,0,0,55,0,0,0,56,0,0,0,57,0,0,0,58,0,0,
		0,59,0,0,0,60,0,0,0,61,0,0,0,62,0,0,0,63,0,0,
		0,64,0,0,0,65,0,0,0,66,0,0,0,67,0,0,0,68,0,0,
		0,69,0,0,0,70,0,0,0,71,0,0,0,72,0,0,0,73,0,0,
		0,74,0,0,0,75,0,0,0,76,0,0,0,77,0,0,0,78,0,0,
		0,79,0,0,0,80,0,0,0,81,0,0,0,82,0,0,0,83,0,0,
		0,84,0,0,0,85,0,0,0,86,0,0,0,87,0,0,0,88,0,0,
		0,89,0,0,0,90,0,0,0,91,0,0,0,92,0,0,0,93,0,0,
		0,94,0,0,0,95,0,0,0,96,0,0,0,97,0,0,0,98,0,0,
		0,99,0,0,0,100,0,0,0,101,0,0,0,102,0,0,0,103,0,0,
		0,104,0,0,0,105,0,0,0,106,0,0,0,107,0,0,0,108,0,0,
		0,109,0,0,0,110,0,0,0,111,0,0,0,112,0,0,0,113,0,0,
		0,114,0,0,0,115,0,0,0,116,0,0,0,117,0,0,0,118,0,0,
		0,119,0,0,0,120,0,0,0,121,0,0,0,122,0,0,0,123,0,0,
		0,124,0,0,0,125,0,0,0,126,0,0,0,127,0,0,0,-128,0,0,
		0,-127,0,0,0,-126,0,0,0,-125,0,0,0,-124,0,0,0,-123,0,0,
		0,-122,0,0,0,-121,0,0,0,-120,0,0,0,-119,0,0,0,-118,0,0,
		0,-117,0,0,0,-116,0,0,0,104,9,22,6,9,7,54,2,-127,1,10,
		-2,2,0,0,2,38,1,4,25,4,0,2,22,2,4,0,2,4,2,48,
		2,48,0,0,0,32,-115,0,0,0,-114,0,0,0,-113,0,0,0,-112,0,
		0,0,74,9,22,6,-23,5,52,2,-43,2,10,-2,2,0,0,2,32,1,
		4,25,4,0,2,16,1,2,2,2,2,48,0,0,0,8,-111,0,0,0,
		96,9,22,6,117,6,0,2,29,2,12,-2,2,0,0,2,38,1,4,25,
		4,0,2,22,2,4,2,2,4,2,48,2,48,0,0,0,24,-110,0,0,
		0,-109,0,0,0,-108,0,0,0,54,9,20,6,68,52,8,49,2,0,-2,
		0,0,0,2,14,1,4,25,4,0,0,0,8,-107,0,0,0,94,9,22,
		6,1,10,52,8,117,1,0,-2,2,0,0,2,44,1,4,25,4,0,2,
		28,3,6,2,0,0,6,2,48,2,48,2,48,0,0,0,16,-106,0,0,
		0,-105,0,0,0,56,9,22,6,-31,2,54,8,109,1,14,16,2,0,0,
		2,14,1,4,25,4,0,0,0,8,-104,0,0,0,54,9,20,6,100,38,
		8,-31,1,18,-2,0,0,0,2,14,1,4,25,4,0,0,0,8,-103,0,
		0,0,0,53,16,6,32,4,79,8,38,93,1,31,1,-90,-57,-94,7,0,
		0,13,4,0,24,52,9,18,6,10,12,0,18,20,-2,2,0,0,2,14,
		1,4,25,4,0,0,0,8,-100,0,0,0,54,9,20,6,65,2,4,0,
		110,0,-2,0,0,0,2,14,1,4,25,4,0,0,0,8,0,0,0,0,
		49,1,9,22,6,77,13,0,8,33,1,2,-2,0,0,0,2,38,1,4,
		25,4,0,2,22,2,4,2,2,4,2,48,2,48,0,0,0,80,1,0,
		0,0,2,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,6,0,
		0,0,7,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,29,2,
		9,20,6,-7,17,12,8,116,4,-2,0,0,0,2,44,1,4,25,4,0,
		2,28,3,6,2,0,0,6,2,51,2,48,2,48,0,0,0,-127,1,11,
		0,0,0,12,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,16,
		0,0,0,17,0,0,0,18,0,0,0,19,0,0,0,20,0,0,0,21,
		0,0,0,22,0,0,0,23,0,0,0,24,0,0,0,25,0,0,0,26,
		0,0,0,27,0,0,0,28,0,0,0,29,0,0,0,30,0,0,0,31,
		0,0,0,32,0,0,0,33,0,0,0,34,0,0,0,93,7,9,24,6,
		75,-101,4,26,4,-7,3,6,8,2,0,0,2,56,1,4,25,4,0,2,
		40,5,10,0,0,0,2,2,10,2,48,2,48,2,48,2,52,2,52,0,
		0,0,-95,6,35,0,0,0,36,0,0,0,37,0,0,0,38,0,0,0,
		39,0,0,0,40,0,0,0,41,0,0,0,42,0,0,0,43,0,0,0,
		44,0,0,0,45,0,0,0,46,0,0,0,47,0,0,0,48,0,0,0,
		49,0,0,0,50,0,0,0,51,0,0,0,52,0,0,0,53,0,0,0,
		54,0,0,0,55,0,0,0,56,0,0,0,57,0,0,0,58,0,0,0,
		59,0,0,0,60,0,0,0,61,0,0,0,62,0,0,0,63,0,0,0,
		64,0,0,0,65,0,0,0,66,0,0,0,67,0,0,0,68,0,0,0,
		69,0,0,0,70,0,0,0,71,0,0,0,72,0,0,0,73,0,0,0,
		74,0,0,0,75,0,0,0,76,0,0,0,77,0,0,0,78,0,0,0,
		79,0,0,0,80,0,0,0,81,0,0,0,82,0,0,0,83,0,0,0,
		84,0,0,0,85,0,0,0,86,0,0,0,87,0,0,0,88,0,0,0,
		89,0,0,0,90,0,0,0,91,0,0,0,92,0,0,0,93,0,0,0,
		94,0,0,0,95,0,0,0,96,0,0,0,97,0,0,0,98,0,0,0,
		99,0,0,0,100,0,0,0,101,0,0,0,102,0,0,0,103,0,0,0,
		104,0,0,0,105,0,0,0,106,0,0,0,107,0,0,0,108,0,0,0,
		109,0,0,0,110,0,0,0,111,0,0,0,112,0,0,0,113,0,0,0,
		114,0,0,0,115,0,0,0,116,0,0,0,117,0,0,0,118,0,0,0,
		119,0,0,0,120,0,0,0,121,0,0,0,122,0,0,0,123,0,0,0,
		124,0,0,0,125,0,0,0,126,0,0,0,127,0,0,0,-128,0,0,0,
		-127,0,0,0,-126,0,0,0,-125,0,0,0,-124,0,0,0,-123,0,0,0,
		-122,0,0,0,-121,0,0,0,-120,0,0,0,-119,0,0,0,-118,0,0,0,
		-117,0,0,0,-116,0,0,0,104,9,22,6,9,7,54,2,-127,1,10,-2,
		2,0,0,2,38,1,4,25,4,0,2,22,2,4,0,2,4,2,48,2,
		48,0,0,0,32,-115,0,0,0,-114,0,0,0,-113,0,0,0,-112,0,0,
		0,74,9,22,6,-23,5,52,2,-43,2,10,-2,2,0,0,2,32,1,4,
		25,4,0,2,16,1,2,2,2,2,48,0,0,0,8,-111,0,0,0,96,
		9,22,6,117,6,0,2,29,2,12,-2,2,0,0,2,38,1,4,25,4,
		0,2,22,2,4,2,2,4,2,48,2,48,0,0,0,24,-110,0,0,0,
		-109,0,0,0,-108,0,0,0,54,9,20,6,68,52,8,49,2,0,-2,0,
		0,0,2,14,1,4,25,4,0,0,0,8,-107,0,0,0,94,9,22,6,
		1,10,52,8,117,1,0,-2,2,0,0,2,44,1,4,25,4,0,2,28,
		3,6,2,0,0,6,2,48,2,48,2,48,0,0,0,16,-106,0,0,0,
		-105,0,0,0,56,9,22,6,-31,2,54,8,109,1,14,16,2,0,0,2,
		14,1,4,25,4,0,0,0,8,-104,0,0,0,54,9,20,6,100,38,8,
		-31,1,18,-2,0,0,0,2,14,1,4,25,4,0,0,0,8,-103,0,0,
		0,0,0,-3,78,1,2,36,0,4,9,75,1,2,26,0,0,-19,74,64,
		-92,0,0,-1,-128,0,0,0,0,0,0,0,0,3,1,52,9,57,0,-103,
		-45,69,-1,-6,-10,64,-93,0,0,-1,-128,0,0,0,0,0,0,0,0,3,
		2,49,9,57,0,-108,-45,69,-1,-2,10,8,0,64,-97,0,11,-1,-128,0,
		0,0,0,0,0,0,0,4,1,-18,9,57,0,-67,-45,69,-1,0,-111,-3,
		64,-98,0,10,-1,-128,0,0,0,0,0,0,0,0,0,1,49,9,57,0,
		-108,-45,69,-1,-11,2,82,64,-99,0,0,-1,-128,0,0,0,0,0,0,0,
		0,0,1,49,9,57,0,-108,-45,69,-1,0,0,64,-100,0,10,-1,-128,0,
		0,0,0,0,0,0,0,0,1,44,9,57,0,-108,-45,69,-1,10,0,64,
		-103,0,9,-1,-68,48,0,0,0,30,0,0,0,4,3,-16,100,57,0,-85,
		61,69,-1,-12,40,0,44,10,40,64,-104,0,7,8,-68,48,0,0,0,30,
		0,0,0,4,9,105,101,57,0,-4,61,69,-1,-26,-68,-28,-100,-20,-32,-16,
		-14,-38,-18,-36,0,-32,12,-22,20,-24,38,64,-105,0,0,-1,-68,48,0,0,
		0,30,0,0,0,4,2,116,101,57,0,38,62,69,-1,-10,-42,-12,-42,64,
		-106,0,0,-1,-128,0,0,0,0,0,0,0,0,4,22,7,101,57,0,83,
		62,69,-1,22,36,34,90,24,100,0,60,-24,104,-4,48,2,28,18,36,34,
		32,30,4,20,-4,97,1,-72,32,-32,12,-42,2,-16,-6,-40,-14,-32,-84,-92,
		-18,-32,-16,-62,-12,-68,-10,-15,-2,64,-107,0,0,-1,-58,56,0,0,0,35,
		0,0,0,4,3,-5,100,57,0,41,62,69,-1,8,38,12,28,4,18,64,
		-108,0,6,-1,-58,56,0,0,0,35,0,0,0,1,1,-32,100,57,0,-60,
		61,69,-1,54,-107,1,64,-109,0,6,-1,-58,56,0,0,0,35,0,0,0,
		1,3,-83,100,57,0,113,61,69,-1,54,50,22,44,26,72,64,-110,0,6,
		-1,-38,72,0,0,0,45,0,0,0,1,7,-5,99,57,0,26,62,69,-1,
		37,1,9,-2,26,-40,30,-32,52,-28,38,-4,38,6,26,12,64,-111,0,5,
		-1,-38,72,0,0,0,45,0,0,0,1,3,6,99,57,0,-119,63,69,-1,
		92,-124,-47,1,81,-3,77,1,-19,-3,64,-112,0,5,-1,-38,72,0,0,0,
		45,0,0,0,1,2,-116,98,57,0,61,64,69,-1,65,1,29,-2,84,-118,
		64,-113,0,5,-1,-128,0,0,0,0,0,0,0,0,1,1,119,98,57,0,
		94,64,69,-1,42,-66,64,-114,0,5,-1,-128,0,0,0,0,0,0,0,0,
		1,1,94,98,57,0,-122,64,69,-1,50,-80,64,-115,0,5,-1,-128,0,0,
		0,0,0,0,0,0,1,2,-40,97,57,0,45,65,69,-1,88,-92,105,1,
		29,-2,64,-116,0,3,4,3,104,0,0,0,65,0,0,0,2,4,7,97,
		57,0,111,66,69,-1,33,1,73,-2,72,-112,29,1,81,-2,60,-96,64,-117,
		0,3,4,3,104,0,0,0,65,0,0,0,2,1,-119,96,57,0,50,67,
		69,-1,-7,1,-11,-4,64,-118,0,3,4,3,104,0,0,0,65,0,0,0,
		2,5,117,95,57,0,-41,68,69,-1,76,-116,96,-31,-2,29,1,73,-2,54,
		-82,113,1,-47,-3,64,-119,0,3,4,3,104,0,0,0,65,0,0,0,2,
		1,99,95,57,0,-13,68,69,-1,36,-56,64,-120,0,3,4,3,104,0,0,
		0,65,0,0,0,2,2,-116,92,57,0,70,73,69,-1,37,3,85,-5,57,
		8,97,-13,64,-121,0,3,4,3,104,0,0,0,65,0,0,0,2,1,124,
		92,57,0,96,73,69,-1,32,-52,64,-122,0,3,4,3,104,0,0,0,65,
		0,0,0,2,6,-29,90,57,0,35,76,69,-1,50,-15,-2,80,-95,-2,17,
		1,13,-2,-55,1,53,-3,-79,1,113,-3,108,-75,-2,64,-123,0,3,4,3,
		104,0,0,0,65,0,0,0,2,4,-107,90,57,0,103,77,69,-1,38,45,
		-2,20,-88,46,-95,-2,52,-43,-2,64,-124,0,3,4,3,104,0,0,0,65,
		0,0,0,2,2,-128,90,57,0,-88,79,69,-1,20,73,-7,22,-75,-3,64,
		-125,0,3,4,3,104,0,0,0,65,0,0,0,2,4,69,90,57,0,-38,
		85,69,-1,30,-107,-2,14,41,-2,56,-51,-18,18,-79,-5,64,-126,0,3,4,
		3,104,0,0,0,65,0,0,0,2,6,-111,89,57,0,61,87,69,-1,100,
		-116,90,-15,-2,28,-52,50,-106,58,-59,-2,34,-27,-2,64,-127,0,3,4,3,
		104,0,0,0,65,0,0,0,2,1,59,88,57,0,-81,88,69,-1,89,5,
		57,-6,64,-128,0,3,4,3,104,0,0,0,65,0,0,0,2,1,-123,87,
		57,0,118,89,69,-1,-39,2,-27,-4,0,127,3,4,3,104,0,0,0,65,
		0,0,0,2,1,-124,86,57,0,-114,90,69,-1,5,4,-95,-5,0,126,3,
		4,3,104,0,0,0,65,0,0,0,2,1,119,86,57,0,-100,90,69,-1,
		26,-28,0,125,3,4,3,104,0,0,0,65,0,0,0,2,1,26,85,57,
		0,21,92,69,-1,117,5,29,-6,0,124,3,4,3,104,0,0,0,65,0,
		0,0,2,1,-7,84,57,0,57,92,69,-1,66,-72,0,123,3,4,3,104,
		0,0,0,65,0,0,0,2,3,-3,82,57,0,95,94,69,-1,60,-64,58,
		-64,5,7,105,-8,0,122,3,4,3,104,0,0,0,65,0,0,0,2,1,
		106,81,57,0,24,96,69,-1,77,6,29,-7,0,121,3,4,3,104,0,0,
		0,65,0,0,0,2,1,91,81,57,0,41,96,69,-1,30,-34,0,120,3,
		4,3,104,0,0,0,65,0,0,0,2,2,29,80,57,0,126,97,69,-1,
		-43,2,-15,-4,37,2,-67,-3,0,119,3,4,3,104,0,0,0,65,0,0,
		0,2,5,71,79,57,0,74,98,69,-1,-7,1,49,-2,5,1,-128,16,-16,
		8,-10,22,-22,0,118,3,4,3,104,0,0,0,65,0,0,0,2,2,94,
		78,57,0,29,99,69,-1,105,1,-75,-2,61,2,1,-2,0,117,3,4,3,
		104,0,0,0,65,0,0,0,2,2,118,77,57,0,-7,99,69,-1,41,2,
		-19,-3,121,1,-91,-2,0,116,3,4,3,104,0,0,0,65,0,0,0,2,
		1,105,77,57,0,6,100,69,-1,26,-26,0,115,3,4,3,104,0,0,0,
		65,0,0,0,2,4,125,75,57,0,-50,101,69,-1,122,-112,-27,2,85,-3,
		81,2,-31,-3,-119,1,-115,-2,0,114,3,4,3,104,0,0,0,65,0,0,
		0,2,3,7,75,57,0,58,102,69,-1,116,-106,74,-68,46,-42,0,113,3,
		4,3,104,0,0,0,65,0,0,0,2,1,96,74,57,0,-43,102,69,-1,
		-99,2,-107,-3,0,112,3,4,3,104,0,0,0,65,0,0,0,2,1,84,
		74,57,0,-32,102,69,-1,24,-22,0,111,3,4,3,104,0,0,0,65,0,
		0,0,2,2,-77,72,57,0,100,104,69,-1,-55,1,85,-2,-67,4,-99,-5,
		0,110,3,4,3,104,0,0,0,65,0,0,0,2,7,-20,67,57,0,-19,
		108,69,-1,21,1,-55,-2,77,1,-87,-2,105,1,-91,-2,73,3,-11,-4,-91,
		9,17,-9,-127,1,-99,-2,116,-108,0,109,3,4,3,104,0,0,0,65,0,
		0,0,2,1,12,67,57,0,-20,109,69,-1,-127,3,5,-4,0,108,3,4,
		3,104,0,0,0,65,0,0,0,2,1,3,67,57,0,-10,109,69,-1,18,
		-20,0,107,3,4,3,104,0,0,0,65,0,0,0,2,1,-96,65,57,0,
		-124,111,69,-1,-115,5,-55,-7,0,106,3,4,3,104,0,0,0,65,0,0,
		0,2,5,-120,63,57,0,-28,113,69,-1,33,2,-107,-3,78,-88,62,-68,93,
		4,5,-5,102,-112,0,105,3,4,3,104,0,0,0,65,0,0,0,2,2,
		90,62,57,0,58,115,69,-1,81,3,61,-4,105,1,109,-2,0,104,3,4,
		3,104,0,0,0,65,0,0,0,2,1,-27,61,57,0,-66,115,69,-1,-43,
		1,-15,-3,0,103,3,4,3,104,0,0,0,65,0,0,0,2,1,84,60,
		57,0,-123,117,69,-1,69,6,-27,-8,0,102,3,4,3,104,0,0,0,65,
		0,0,0,2,1,29,59,57,0,-26,118,69,-1,-35,4,125,-6,0,101,3,
		4,3,104,0,0,0,65,0,0,0,2,3,-44,57,57,0,90,120,69,-1,
		-111,1,65,-2,86,-98,-23,2,-75,-4,0,100,3,4,3,104,0,0,0,65,
		0,0,0,2,7,84,55,57,0,-68,123,69,-1,42,-108,94,93,-2,94,-83,
		-2,66,-100,118,-59,-2,-75,1,13,-2,17,5,65,-6,0,99,3,4,3,104,
		0,0,0,65,0,0,0,2,1,79,55,57,0,-53,123,69,-1,10,-30,0,
		98,3,4,3,104,0,0,0,65,0,0,0,2,1,49,55,57,0,41,124,
		69,-1,60,-119,-2,0,97,3,4,3,104,0,0,0,65,0,0,0,2,3,
		122,54,57,0,-86,126,69,-1,50,-87,-2,-119,1,-123,-6,120,-47,-4,0,96,
		3,4,3,104,0,0,0,65,0,0,0,2,8,-23,52,57,0,-98,-126,69,
		-1,37,1,109,-3,81,1,21,-3,88,113,-2,52,-116,112,-43,-3,112,-107,-3,
		46,-31,-2,78,-31,-3,0,95,3,4,3,104,0,0,0,65,0,0,0,2,
		8,-100,51,57,0,70,-121,69,-1,58,-91,-4,68,65,-3,86,37,-3,54,-115,
		-2,10,-36,80,13,-2,106,-67,-3,-103,1,77,-4,0,94,3,4,3,104,0,
		0,0,65,0,0,0,2,5,118,50,57,0,-114,-113,69,-1,84,25,-3,68,
		-11,-4,16,-128,-111,1,121,-13,-71,1,93,-14,0,93,3,4,3,104,0,0,
		0,65,0,0,0,2,3,7,50,57,0,5,-111,69,-1,25,1,-103,-4,52,
		125,-2,30,-120,0,92,3,4,3,104,0,0,0,65,0,0,0,2,3,-11,
		49,57,0,54,-111,69,-1,2,-6,10,-26,24,-66,0,91,3,4,3,104,0,
		0,0,65,0,0,0,2,4,85,49,57,0,-112,-110,69,-1,24,-44,112,81,
		-2,118,-11,-3,66,-83,-2,0,90,3,4,3,104,0,0,0,65,0,0,0,
		2,1,66,49,57,0,-78,-110,69,-1,38,-68,0,89,3,4,3,104,0,0,
		0,65,0,0,0,2,2,27,45,57,0,-57,-103,69,-1,-47,15,21,-27,102,
		-103,-2,0,88,3,4,3,104,0,0,0,65,0,0,0,2,1,-19,44,57,
		0,22,-102,69,-1,92,-59,-2,0,87,3,4,3,104,0,0,0,65,0,0,
		0,2,3,97,44,57,0,7,-101,69,-1,44,-78,-67,1,9,-3,14,-24,0,
		86,3,4,3,104,0,0,0,65,0,0,0,2,4,76,44,57,0,44,-101,
		69,-1,8,-14,0,-2,10,-16,24,-42,0,85,3,4,3,104,0,0,0,65,
		0,0,0,2,2,-58,43,57,0,11,-100,69,-1,-47,1,-7,-4,36,-58,0,
		84,3,4,3,104,0,0,0,65,0,0,0,2,1,-66,43,57,0,26,-100,
		69,-1,16,-30,0,83,3,4,3,104,0,0,0,65,0,0,0,2,3,14,
		42,57,0,-5,-98,69,-1,-123,4,77,-8,-27,1,-55,-4,44,-76,0,82,3,
		4,3,104,0,0,0,65,0,0,0,2,1,6,42,57,0,7,-97,69,-1,
		16,-24,0,81,3,4,3,104,0,0,0,65,0,0,0,2,3,-128,41,57,
		0,-20,-97,69,-1,70,-118,72,-118,126,69,-2,0,80,3,4,3,104,0,0,
		0,65,0,0,0,2,3,90,40,57,0,-30,-95,69,-1,-87,2,121,-5,48,
		-74,-111,1,69,-3,0,79,3,4,3,104,0,0,0,65,0,0,0,2,2,
		127,39,57,0,88,-93,69,-1,-39,2,41,-5,74,-128,0,78,3,4,3,104,
		0,0,0,65,0,0,0,2,4,-103,37,57,0,-125,-90,69,-1,50,-70,68,
		-100,96,-51,-2,-19,5,-35,-11,0,77,3,4,3,104,0,0,0,65,0,0,
		0,2,1,104,37,57,0,-62,-90,69,-1,98,-126,0,76,3,4,3,104,0,
		0,0,65,0,0,0,2,5,99,34,57,0,-11,-87,69,-1,-103,1,85,-2,
		5,1,-15,-2,-35,5,-39,-7,105,2,125,-3,53,1,-99,-2,0,75,3,4,
		3,104,0,0,0,65,0,0,0,2,1,90,34,57,0,-2,-87,69,-1,18,
		-18,0,74,3,4,3,104,0,0,0,65,0,0,0,2,5,75,29,57,0,
		76,-81,69,-1,105,2,125,-3,26,-28,125,7,45,-8,-51,5,-23,-7,89,4,
		113,-5,0,73,3,4,3,104,0,0,0,65,0,0,0,2,1,36,29,57,
		0,117,-81,69,-1,78,-82,0,72,3,4,3,104,0,0,0,65,0,0,0,
		2,2,-6,28,57,0,-96,-81,69,-1,52,-54,32,-32,0,71,3,4,3,104,
		0,0,0,65,0,0,0,2,1,-66,28,57,0,-34,-81,69,-1,120,-124,0,
		70,3,4,3,104,0,0,0,65,0,0,0,2,5,101,27,57,0,76,-79,
		69,-1,78,-88,-27,2,-7,-4,86,-92,20,-20,17,1,-31,-2,0,69,3,4,
		3,104,0,0,0,65,0,0,0,2,3,-116,26,57,0,93,-78,69,-1,-119,
		1,-19,-3,80,-98,61,1,-107,-2,0,68,3,4,3,104,0,0,0,65,0,
		0,0,2,1,105,26,57,0,-114,-78,69,-1,70,-98,0,67,3,4,3,104,
		0,0,0,65,0,0,0,2,1,-93,25,57,0,-98,-77,69,-1,25,3,-63,
		-5,0,66,3,4,3,104,0,0,0,65,0,0,0,2,2,-110,25,57,0,
		-75,-77,69,-1,24,-34,10,-12,0,65,3,4,3,104,0,0,0,65,0,0,
		0,2,1,2,25,57,0,123,-76,69,-1,65,2,-23,-4,0,64,3,4,3,
		104,0,0,0,65,0,0,0,2,3,6,24,57,0,-45,-75,69,-1,26,-34,
		73,3,-119,-5,58,-82,0,63,3,4,3,104,0,0,0,65,0,0,0,2,
		2,-22,23,57,0,-5,-75,69,-1,38,-56,18,-24,0,62,3,4,3,104,0,
		0,0,65,0,0,0,2,2,31,23,57,0,25,-73,69,-1,101,1,-3,-3,
		-55,1,-115,-3,0,61,3,4,3,104,0,0,0,65,0,0,0,2,5,76,
		22,57,0,-64,-72,69,-1,1,1,-115,-3,50,-114,56,-120,50,-88,21,1,93,
		-2,0,60,3,4,3,104,0,0,0,65,0,0,0,2,1,45,22,57,0,
		15,-71,69,-1,62,-59,-2,0,59,3,4,3,104,0,0,0,65,0,0,0,
		2,3,-6,21,57,0,-113,-71,69,-1,62,-59,-2,6,-16,34,-82,0,58,3,
		4,3,104,0,0,0,65,0,0,0,2,2,-88,21,57,0,103,-70,69,-1,
		38,-96,126,97,-3,0,57,3,4,3,104,0,0,0,65,0,0,0,2,3,
		-24,20,57,0,57,-68,69,-1,44,-102,98,-7,-3,-27,1,-115,-5,0,56,3,
		4,3,104,0,0,0,65,0,0,0,2,2,-91,20,57,0,-26,-68,69,-1,
		88,89,-2,46,-11,-2,0,55,3,4,3,104,0,0,0,65,0,0,0,2,
		1,-98,20,57,0,-7,-68,69,-1,14,-38,0,54,3,4,3,104,0,0,0,
		65,0,0,0,2,3,99,20,57,0,-29,-67,69,-1,58,-15,-3,26,-98,34,
		-106,0,53,3,4,3,104,0,0,0,65,0,0,0,2,4,33,20,57,0,
		21,-65,69,-1,18,-82,48,73,-2,54,5,-2,12,-56,0,52,3,4,3,104,
		0,0,0,65,0,0,0,2,1,30,20,57,0,34,-65,69,-1,6,-26,0,
		51,3,4,3,104,0,0,0,65,0,0,0,2,3,-87,19,57,0,50,-63,
		69,-1,106,81,-4,64,-95,-3,64,-47,-3,0,50,3,4,3,104,0,0,0,
		65,0,0,0,2,1,-94,19,57,0,84,-63,69,-1,14,-68,0,49,3,4,
		3,104,0,0,0,65,0,0,0,2,7,-92,18,57,0,109,-59,69,-1,13,
		1,53,-5,54,45,-2,12,-50,-91,1,-23,-7,48,121,-2,38,-87,-2,12,-52,
		0,48,3,4,3,104,0,0,0,65,0,0,0,2,1,-98,18,57,0,-123,
		-59,69,-1,12,-48,0,47,3,4,3,104,0,0,0,65,0,0,0,2,1,
		-113,18,57,0,-56,-59,69,-1,30,-11,-2,0,46,3,4,-128,0,0,0,0,
		0,0,0,0,2,2,16,18,57,0,16,-56,69,-1,-35,1,121,-9,16,-76,
		0,45,3,4,3,104,0,0,0,65,0,0,0,2,1,-12,17,57,0,-112,
		-56,69,-1,56,1,-2,0,44,3,4,3,104,0,0,0,65,0,0,0,2,
		6,-109,17,57,0,77,-54,69,-1,20,-84,18,-106,12,-42,24,-108,48,65,-2,
		72,117,-3,0,43,3,4,3,104,0,0,0,65,0,0,0,2,1,-120,17,
		57,0,-127,-54,69,-1,22,-104,0,42,3,4,3,104,0,0,0,65,0,0,
		0,2,5,3,17,57,0,-35,-52,69,-1,34,-128,74,21,-3,56,13,-2,44,
		109,-2,58,5,-2,0,41,3,4,3,104,0,0,0,65,0,0,0,2,3,
		-2,16,57,0,-13,-52,69,-1,2,-6,6,-26,2,-12,0,40,3,4,3,104,
		0,0,0,65,0,0,0,2,3,-79,16,57,0,86,-50,69,-1,72,93,-3,
		56,9,-2,26,-120,0,39,3,4,3,104,0,0,0,65,0,0,0,2,3,
		-16,15,57,0,-63,-47,69,-1,36,-63,-2,24,-104,-115,2,101,-12,0,38,3,
		4,3,104,0,0,0,65,0,0,0,2,1,-23,15,57,0,-28,-47,69,-1,
		14,-70,0,37,3,4,-128,0,0,0,0,0,0,0,0,2,7,100,16,57,
		0,-38,-46,69,-1,-67,-2,-56,-36,-24,-42,-54,-18,-42,-10,-48,0,-50,22,77,
		-2,0,36,3,4,-128,0,0,0,0,0,0,0,0,2,3,109,16,57,0,
		-7,-46,69,-1,0,-40,-4,-10,-14,-12,0,35,3,4,-128,0,0,0,0,0,
		0,0,0,2,1,108,16,57,0,7,-45,69,-1,2,-28,0,34,2,-1,-68,
		48,0,0,0,30,0,0,0,4,1,16,16,57,0,-24,-46,69,-1,113,1,
		62,0,33,2,-1,-68,48,0,0,0,30,0,0,0,4,2,-57,15,57,0,
		-55,-46,69,-1,12,16,13,1,46,0,32,2,-1,-68,48,0,0,0,30,0,
		0,0,4,3,-101,15,57,0,-71,-46,69,-1,22,8,38,14,28,10,0,31,
		2,-1,-68,48,0,0,0,30,0,0,0,4,1,-107,15,57,0,-73,-46,69,
		-1,12,4,0,30,2,-1,-68,48,0,0,0,30,0,0,0,4,1,-10,14,
		57,0,-122,-46,69,-1,125,2,98,0,29,2,-1,-68,48,0,0,0,30,0,
		0,0,4,1,-43,14,57,0,124,-46,69,-1,66,20,0,28,2,-1,-68,48,
		0,0,0,30,0,0,0,4,1,-48,14,57,0,122,-46,69,-1,10,4,0,
		27,2,-1,-68,48,0,0,0,30,0,0,0,4,1,-55,14,57,0,120,-46,
		69,-1,14,4,0,26,2,-1,-68,48,0,0,0,30,0,0,0,4,1,-95,
		14,57,0,107,-46,69,-1,80,26,0,25,2,-1,-68,48,0,0,0,30,0,
		0,0,4,3,33,14,57,0,64,-46,69,-1,70,24,102,32,84,30,0,24,
		2,-1,-68,48,0,0,0,30,0,0,0,4,1,15,14,57,0,58,-46,69,
		-1,36,12,0,23,2,-1,-68,48,0,0,0,30,0,0,0,4,2,-12,13,
		57,0,49,-46,69,-1,40,14,14,4,0,22,2,-1,-68,48,0,0,0,30,
		0,0,0,4,1,-35,13,57,0,42,-46,69,-1,46,14,0,21,2,-1,-68,
		48,0,0,0,30,0,0,0,4,2,82,13,57,0,-4,-47,69,-1,69,1,
		52,116,40,0,20,2,-1,-68,48,0,0,0,30,0,0,0,4,1,66,13,
		57,0,-10,-47,69,-1,32,12,0,19,2,-1,-68,48,0,0,0,30,0,0,
		0,4,1,40,13,57,0,-19,-47,69,-1,52,18,0,18,2,-1,-68,48,0,
		0,0,30,0,0,0,4,1,-1,12,57,0,-33,-47,69,-1,82,28,0,17,
		2,-1,-68,48,0,0,0,30,0,0,0,4,1,-32,12,57,0,-43,-47,69,
		-1,62,20,0,16,2,-1,-68,48,0,0,0,30,0,0,0,4,1,-57,12,
		57,0,-50,-47,69,-1,50,14,0,15,2,-1,-68,48,0,0,0,30,0,0,
		0,4,1,-72,12,57,0,-56,-47,69,-1,30,12,0,14,2,-1,-68,48,0,
		0,0,30,0,0,0,4,1,-120,12,57,0,-72,-47,69,-1,96,32,0,13,
		2,-1,-68,48,0,0,0,30,0,0,0,4,2,115,12,57,0,-73,-47,69,
		-1,24,8,18,-6,0,12,2,-1,-58,56,0,0,0,35,0,0,0,4,1,
		96,12,57,0,-79,-47,69,-1,38,12,0,11,2,-1,-58,56,0,0,0,35,
		0,0,0,4,4,18,12,57,0,-94,-47,69,-1,20,2,38,8,36,4,62,
		16,0,10,1,-1,-58,56,0,0,0,35,0,0,0,4,1,-48,11,57,0,
		-101,-47,69,-1,9,1,14,0,9,1,-1,-58,56,0,0,0,35,0,0,0,
		4,3,125,11,57,0,-101,-47,69,-1,68,-10,70,6,28,4,0,8,1,-1,
		-58,56,0,0,0,35,0,0,0,4,3,62,11,57,0,-63,-47,69,-1,44,
		-36,46,-26,36,-14,0,7,1,-1,-58,56,0,0,0,35,0,0,0,4,8,
		-59,10,57,0,-81,-46,69,-1,44,-50,20,-32,28,-50,20,-52,24,-92,36,-100,
		40,-66,30,-34,0,6,1,-1,-58,56,0,0,0,35,0,0,0,4,1,-84,
		10,57,0,-60,-46,69,-1,50,-42,0,5,1,-1,-58,56,0,0,0,35,0,
		0,0,4,1,-116,10,57,0,-39,-46,69,-1,64,-42,0,4,1,-1,-58,56,
		0,0,0,35,0,0,0,4,1,116,10,57,0,-25,-46,69,-1,48,-28,0,
		3,1,-1,-58,56,0,0,0,35,0,0,0,4,5,-18,9,57,0,33,-45,
		69,-1,36,0,32,-6,42,-16,40,-22,118,-72,0,2,1,-1,-58,56,0,0,
		0,35,0,0,0,4,2,-71,9,57,0,19,-45,69,-1,72,24,34,4,0,
		1,1,-1,-58,56,0,0,0,35,0,0,0,4,2,77,9,57,0,-31,-46,
		69,-1,96,38,120,62,0,0,0,-1,-128,0,0,0,0,0,0,0,0,0,
		2,49,9,57,0,-108,-45,69,-1,44,-115,-3,12,-44,-51,3,1,2,42,24,
		24,69,32,65,114,113,117,101,115,32,65,118,101,24,83,97,110,116,97,32,
		65,110,97,32,67,116,70,83,97,110,32,70,114,97,110,99,105,115,99,111,
		32,73,110,116,101,114,110,97,116,105,111,110,97,108,32,65,105,114,112,111,
		114,116,28,77,99,68,111,110,110,101,108,108,32,82,79,65,68,18,84,101,
		114,109,105,110,97,108,115,44,73,110,116,101,114,110,97,116,105,111,110,97,
		108,32,84,101,114,109,105,110,97,108,52,83,97,110,32,70,114,97,110,99,
		105,115,99,111,32,73,110,116,108,32,65,105,114,112,111,114,116,28,66,97,
		121,115,104,111,114,101,32,70,119,121,32,78,16,85,83,45,49,48,49,32,
		78,30,78,32,70,97,105,114,32,79,97,107,115,32,65,118,101,20,78,32,
		87,111,108,102,101,32,82,100,0,0,96,11,0,0,0,10,0,0,0,9,
		0,0,0,8,0,0,0,7,0,0,0,6,0,0,0,5,0,0,0,4,
		0,0,0,3,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,0,
		121,1,1,4,45,4,0,2,85,1,8,28,56,-89,78,-106,3,-89,-34,83,
		-12,8,0,2,0,0,16,6,83,70,79,70,83,97,110,32,70,114,97,110,
		99,105,115,99,111,32,73,110,116,101,114,110,97,116,105,111,110,97,108,32,
		65,105,114,112,111,114,116,20,66,85,82,76,73,78,71,65,77,69,4,67,
		65,2,48,10,57,52,49,50,56,4,85,83,0,0,0,0,0,		
	};
    public static void prepareRouteData()
    {
        Node node = new Node(routesData, 0, Node.VERSION_55);
        parseRouteData(node);
    }
    
    private static void parseRouteData(Node node)
    {
        for (int i = 0; i < node.getChildrenSize(); i++)
        {
            Node curNode = node.getChildAt(i);

            int type = (int) curNode.getValueAt(0);
            if (type == IServerProxyConstants.TYPE_MULTI_ROUTES)
            {
                Route[] nominalRoutes = new Route[curNode.getChildrenSize()];
                for (int j = 0; j < curNode.getChildrenSize(); j++)
                {
                    Node childNode = curNode.getChildAt(j);
                    nominalRoutes[j] = unmarshal(childNode);
                }
                RouteWrapper.getInstance().clear();
                RouteWrapper.getInstance().addRoutes(nominalRoutes);
                RouteWrapper.getInstance().setCurrentRouteId((int) curNode.getValueAt(1));
            }
            else if (type == IServerProxyConstants.TYPE_MAP_SECTION)
            {
                resolveRouteReferences(curNode);
            }
            else if (type == IServerProxyConstants.TYPE_ROUTE_DYNAMIC_AUDIO)
            {
                parseRouteDynamicAudioNode(curNode);
            }
            else if (type == IServerProxyConstants.TYPE_ROUTE_DESTINATION_AUDIO)
            {
                if (curNode.getChildrenSize() > 0)
                {
                    Vector routes = RouteWrapper.getInstance().getRoutes();
                    if (routes != null)
                    {
                        for (int r = 0; r < routes.size(); r++)
                        {
                            Route tmpRoute = (Route)routes.elementAt(r);
                            if (tmpRoute != null)
                            {
                                tmpRoute.setDestinationAudio(createAudioDataNodes(curNode));
                            }
                        }
                    }
                }
            }
        }
    }
    
    private static Route unmarshal(Node node)
    {
        if ((null == node) || (IServerProxyConstants.TYPE_NOMINAL_ROUTE != (int) node.getValueAt(0)))
            return null;
            
        int index = 1;
        Route newRoute = RouteDataFactory.getInstance().createRoute();
        newRoute.setRouteID((int)node.getValueAt(index++));
        newRoute.setOriginTimeStamp(node.getValueAt(index++));
        newRoute.setOriginVn((int)node.getValueAt(index++));
        newRoute.setOriginVe((int)node.getValueAt(index++));
        int totalDelay = (int)node.getValueAt(index++);
 
        int nNumSegments = node.getChildrenSize();
        Segment[] segments = new Segment[nNumSegments];

        for(int i = 0; i < nNumSegments; i++)
        {
            segments[i] = segmentFromNode(node.getChildAt(i));
        }

        newRoute.setSegments(segments);
        
        if (totalDelay != 0)
        {   
            newRoute.setTrafficDelayTime(totalDelay, newRoute.getLength());
        }   
        
        return newRoute;
    }
    
    /**
     * compose segment from a node
     */
    private static Segment segmentFromNode(Node node)
    {
        Segment seg = null;
        
        if (node != null)
        {
            //sanity check - make sure type is TYPE_ROUTE_SEGMENT
            int type = (int) node.getValueAt(0);
            if (type == IServerProxyConstants.TYPE_ROUTE_SEGMENT)
            {
                //------------------ params ------------------
                // 0 --- TYPE_ROUTE_SEGMENT
                // 1 --- segment length
                // 2 --- turn type
                // 3 --- road type
                // 4 --- speed limit
                // 5 --- street name id
                // 6 --- street alias id
                // 7 --- segment type
                //---------------------------------------------------------
                seg = RouteDataFactory.getInstance().createsSegment();
                seg.setLength((int)node.getValueAt(1));
                seg.setTurnType((byte) node.getValueAt(2));
                
                seg.setRoadType((byte) node.getValueAt(3));
                seg.setRoadType((byte)MapUtil.convertRoadType(seg.getRoadType()));
                
                seg.setSpeedLimit((int) node.getValueAt(4));
                seg.setStreetNameId((int) node.getValueAt(5));
                seg.setStreetAliasId((int) node.getValueAt(6));
                seg.setSegmentType((byte) node.getValueAt(7));
                
                if(node.getValuesSize() > 8)
                    seg.setExitNumber((byte) node.getValueAt(8));
                
                if(node.getStringsSize() > 0)
                {
                    seg.setExitName(node.getStringAt(0));
                }

                // child - lane
                if (node.getChildrenSize() > 0)
                {
                    Node laneNode = node.getChildAt(0);
                    if (laneNode != null
                            && laneNode.getValueAt(0) == IServerProxyConstants.TYPE_SEGMENT_LANINFO)
                    {
                        if (laneNode.getChildrenSize() > 0)
                        {
                            Node segmentLaneNode = laneNode.getChildAt(0);

                            int laneSize = segmentLaneNode.getValuesSize() > segmentLaneNode
                                    .getStringsSize() ? segmentLaneNode.getStringsSize()
                                    : segmentLaneNode.getValuesSize();

                            int laneInfos[] = new int[laneSize];
                            int laneTypes[] = new int[laneSize];

                            for (int laneIdx = 0; laneIdx < laneSize; laneIdx++)
                            {
                                laneInfos[laneIdx] = (int) segmentLaneNode
                                        .getValueAt(laneIdx);

                                String laneType = segmentLaneNode.getStringAt(laneIdx);
                                laneTypes[laneIdx] = Integer.parseInt(laneType);
                            }
                            seg.setLaneInfos(laneInfos);
                            seg.setLaneTypes(laneTypes);
                        }
                    }
                }
                
                // bindata - array of Edge ID's for this segment
                if (node.getBinaryData() != null && node.getBinaryData().length > 0)
                {
                    int len = node.getBinaryData().length >> 2;// 4 bytes per int
                    int[] edgeIDs = new int[len];
                    for(int j = 0; j < len; j++)
                    {
                        edgeIDs[j] = DataUtil.readInt(node.getBinaryData(), j * 4);
                    }
                    seg.setEdgesId(edgeIDs);
                } 
            }
        }
        
        return seg;
    }
    
    private static void resolveRouteReferences(Node mapSection)
    {
        if (mapSection == null || mapSection.getChildrenSize() == 0)
        {
            return; 
        }
        try
        {
            Node edges = mapSection.getChildAt(0);
            
            byte[] buff = edges.getBinaryData();
            if (buff == null)
                return;
            
            int[] ret = new int[2];
            
            Hashtable edgesTable = new Hashtable();
            int offset = 0;
            while (offset < buff.length)
            {
                RouteEdge e = RouteDataFactory.getInstance().createRouteEdge();
                offset += binToEdge(e, buff, offset, ret);
                e.setRoadType(MapUtil.convertRoadType(e.getRoadType()));
                edgesTable.put(new Integer(e.getID()), e);
            }

            Hashtable routeStrings = new Hashtable();
            
            if (mapSection.getChildrenSize() > 1)
            {                
                Node strings = mapSection.getChildAt(1);
                byte[] binary = strings.getBinaryData();
                // deserialize strings
                if (binary != null)
                {
                    int size = binary.length >> 2;
                    for (int i = 0; i < size; i++)
                    {
                        routeStrings.put(new Integer(DataUtil.readInt(binary, i << 2)), strings.getStringAt(i));
                    }
                }
            }
            
            int[] rules = NavDataFactory.getInstance().getNavUtil().getThresholdRules();
            Vector nominalRoutes = RouteWrapper.getInstance().getRoutes();
            if(nominalRoutes != null)
            {
                for (int i = 0; i < nominalRoutes.size(); i++)
                {
                    Route route = (Route)nominalRoutes.elementAt(i);
                    route.resolveReferences(edgesTable, routeStrings, rules);
                }
            }
        }
        catch (Throwable ex)
        {
        }
    }
    
    private static void parseRouteDynamicAudioNode(Node node)
    {
        if(node.getValueAt(0) == IServerProxyConstants.TYPE_ROUTE_DYNAMIC_AUDIO)
        {
            for(int i = 0; i < node.getChildrenSize(); i++)
            {
                parseDynamicAudioNode(node.getChildAt(i));
            }
        }
    }
    
    private static void parseDynamicAudioNode(Node node)
    {
        if (node.getValueAt(0) == IServerProxyConstants.TYPE_DYNAMIC_AUDIO)
        {
            int routePathId = (int) node.getValueAt(1);

            Route selectedRoute = RouteWrapper.getInstance().getRoute(routePathId);
            if (selectedRoute == null)
            {
                return;
            }

            for (int i = 0; i < node.getChildrenSize(); i++)
            {
                Node segmentNode = node.getChildAt(i);
                int segmentIndex = (int) segmentNode.getValueAt(1);
                Segment[] segments = selectedRoute.getSegments();
                if (segments != null && segmentIndex >= 0 && segmentIndex < segments.length)
                {
                    segments[segmentIndex].setSegmentAudioNode(createAudioDataNodes(segmentNode));
                }
            }
        }
    }
    
    public static AudioDataNode createAudioDataNodes(Node nodes)
    {
        AudioDataNode audioNodes = AudioDataFactory.getInstance().createAudioDataNode(null);
        if(nodes.getChildrenSize() > 0)
        {
            for (int i = 0; i < nodes.getChildrenSize(); i++)
            {
                Node node = nodes.getChildAt(i);
                AudioDataNode audioNode = createAudioDataNode(node);
                if(audioNode != null)
                {
                    audioNodes.addChild(audioNode);
                }
            }
        }
        else
        {
            audioNodes = createAudioDataNode(nodes);
        }
        
        return audioNodes;
    }
    
    private static AudioDataNode createAudioDataNode(Node node)
    {
        if (node.getValueAt(0) == IServerProxyConstants.TYPE_MSG_AUDIO)
        {
            int audioId = (int) node.getValueAt(1);
            AudioData audioData = AudioDataFactory.getInstance().createAudioData(audioId);
            if (node.getBinaryData() != null)
            {
                audioData.setAudio(node.getBinaryData());
            }
            
            AudioDataNode audioDataNode = AudioDataFactory.getInstance().createAudioDataNode(audioData);
            return audioDataNode;
        }
        
        return null;
    }
    
    private static int binToEdge(RouteEdge edge, byte[] buff, int offset, int[] ret)
    {
        int firstByte = buff[offset];
        firstByte &= 0xFF;
        int startIndex = offset;
        offset += 1;

        //read id
        int len = (firstByte >> 6) + 1;
        edge.setID(readInt(buff, offset, len));
        offset += len;
        
        //read street name id
        //[XR]avoid the value because we store the street name id into segment now
        len = ((firstByte >> 4) & 3) + 1;
        readInt(buff, offset, len);
        offset += len;

        //read street alias id
        //[XR]avoid the value because we store the street alias id into segment now
        len = ((firstByte >> 2) & 3) + 1;
        readInt(buff, offset, len);
        offset += len;

        
        //read speed limit and road type
        edge.setSpeedLimit((buff[offset++] + 128)<<1);
        edge.setSpeedLimitKph(readInt(buff, offset));//speedLimit_kph
        offset += 4;
        edge.setSpeedLimitMph(readInt(buff, offset));//speedLimit_mph
        offset += 4;
        edge.setRoadType(buff[offset++]);
        
        //read point size
        len = ((firstByte) & 3) + 1;
        int length = readInt(buff, offset, len);
        offset += len;
                
        //read first lat, lon
        int prevLat = readInt(buff, offset);
        offset += 4;
        int prevLon = readInt(buff, offset);
        offset += 4;
        
        int[] shapePoints = new int[(length + 1) * 2];
        
        shapePoints[DataUtil.LAT] = prevLat;
        shapePoints[DataUtil.LON] = prevLon;

        //read remain points
        int doubleI = 2;
        for (int i = 1; i < length + 1; i ++,doubleI+=2)
        {
            readPoint(buff, offset, ret);
            offset += ret[0];
            prevLat += ret[1];
            
            readPoint(buff, offset, ret);
            offset += ret[0];
            prevLon += ret[1];
            
            shapePoints[doubleI + DataUtil.LAT] = prevLat;
            shapePoints[doubleI + DataUtil.LON] = prevLon;
        }
        
        edge.setShapePoints(shapePoints);
        
        return offset - startIndex;
    }
    
    /**
     * read a point
     */
    private static void readPoint(byte[] buff, int offset, int[] ret)
    {
        int len = 0;
        int delta;
        int mask = buff[offset] & 1;
        if (mask == 0)
        {
            len = 1;
            delta = readInt(buff, offset, len) >> 1;
        }
        else 
        {
            mask = buff[offset] & 3;
            len = mask == 1 ? 2 : 3;
            delta = readInt(buff, offset, len) >> 2;
        }
        
        ret[0] = len;
        ret[1] = delta;
    }
    
    private static int readInt(byte[] buff, int offset)
    {
        return readInt(buff, offset, 4);
    }
    
    private static int readInt(byte[] buff, int offset, int len)
    {
        if (len == 1)
            return buff[offset];
        else if (len == 2)
            return DataUtil.readShort(buff, offset);
        else if (len == 3)
        {
            int mask = 0xFF;
            return (mask & buff[offset]) + ((mask & buff[offset+1]) << 8) + (((int)buff[offset+2]) << 16);
        }
        else if (len == 4)
            return DataUtil.readInt(buff, offset);
        else
        {
            throw new RuntimeException("unsupported int length " + len);
        }
    }
}
